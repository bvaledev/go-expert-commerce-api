basePath: /
definitions:
  dto.AuthenticateUserDTO:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.AuthenticateUserResponse:
    properties:
      access_token:
        type: string
    type: object
  dto.CreateProductDTO:
    properties:
      name:
        type: string
      price:
        type: number
    type: object
  dto.CreateUserDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dto.UpdateProductDTO:
    properties:
      name:
        type: string
      price:
        type: number
    type: object
  entity.Product:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
host: localhost:8000
info:
  contact:
    email: brendo@brendo.dev.br
    name: API Support
    url: http://www.brendo.dev.br/support
  description: Uma aplicação de ecommerce feita em go.
  termsOfService: http://swagger.io/terms/
  title: GO Expert Commerce
  version: "1.0"
paths:
  /products:
    get:
      consumes:
      - application/json
      description: List products
      parameters:
      - description: page number
        in: query
        name: page
        type: string
      - description: page limit
        in: query
        name: limit
        type: string
      - description: page sort order
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Product'
            type: array
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: List products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create product
      parameters:
      - description: product request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create product
      tags:
      - Products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete product
      parameters:
      - description: product id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Product'
            type: array
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete product
      tags:
      - Products
    get:
      consumes:
      - application/json
      description: Get product
      parameters:
      - description: product id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Product'
            type: array
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get product
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update product
      parameters:
      - description: product id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: product request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProductDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Product'
            type: array
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update product
      tags:
      - Products
  /users:
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: User registration info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create user
      tags:
      - Users
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate user
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AuthenticateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthenticateUserResponse'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema: {}
      summary: Authenticate user
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
